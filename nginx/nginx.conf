worker_processes  auto;
error_log logs/error.log;
events {
    use epoll;
    multi_accept on;
    worker_connections 1024;
}
http {
    proxy_request_buffering off;
    client_max_body_size 120M;
    error_page 502 /502.html;
    keepalive_timeout 5s 5s;
    tcp_nopush on;
    tcp_nodelay on;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }


    server {
        listen 443 ssl;
        listen 80; 
        ssl_certificate your_cert.crt;     
        ssl_certificate_key your_key.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
        ssl_prefer_server_ciphers on;
        ssl_dhparam dhparams.pem;

        location /502.html{
        }

        location / {
            resolver 8.8.4.4;  # use Google's open DNS server
            set $target '';
            set $name   '';
            access_by_lua '

                -- log some data
                -- ngx.log(ngx.ERR, "ngx.var.http_host ", ngx.var.http_host)
                --- ngx.log(ngx.ERR, "+++ngx.var.hostname ", ngx.var.hostname)

                --- lookup key
                local key = ngx.var.http_host
                if not key then
                    ngx.log(ngx.ERR, "no http_host found")
                    return ngx.exit(400)
                end

                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 second

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                    return ngx.exit(500)
                end

            
                -- fixup key buy removing any trailing port ie x.dood.com:9999 would get key =x.dood.com
                -- local i,j = string.find("hello:boss",":")
                local i,j = string.find(key,":")
                if i then
                    ngx.log(ngx.ERR,"remove port from key : ",i,j )
                    key=string.sub(key,1,i-1)
                end
                -- ngx.log(ngx.ERR, "key is ", key)

                local host, err = red:get(key)
                if not host then
                    ngx.log(ngx.ERR, "failed to get redis key: ", err)
                    return ngx.exit(500)
                end

                -- If no match use this machine
                if host == ngx.null then
                    -- ngx.log(ngx.ERR,"remove port from key : ",i,j )
                    -- ngx.log(ngx.ERR,"key is ",key)
                    -- ngx.log(ngx.ERR,"host is ",ngx.var.hostname)

                    i, j = string.find(key, ngx.var.hostname)
                    if i then
                        host="127.0.0.1:8080"
                    else
                        host="127.0.0.1:8081"
                    end    
                else
                    host="127.0.0.1:"..host;
                end     
				
		-- ngx.log(ngx.ERR, "---host is: ", host)

                ngx.var.target = host
                ngx.var.name = key
            ';

            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $name;

            # WebSocket support (nginx 1.4)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            proxy_pass http://$target;
        }
    }
}

